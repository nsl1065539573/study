# jvm的运行机制

### JVM概念

JVM是用于运行Java字节码的虚拟机，包含一套字节码指令集、一组程序寄存器，一个虚拟机栈，一个虚拟机堆，一个方法区和一个垃圾回收器。JVM运行在操作系统之上，不与硬件设备直接交互。

​	Java源文件在通过编译器编译之后被编译成相应的.class文件（字节码文件），.class文件又被JVM中的解释器编译成机器码在不同的操作系统上运行。每种操作系统的解释器都是不同的，但是基于解释器实现的虚拟机是相同的，这也是Java能够跨平台的原因。在一个Java进程开始运行后，虚拟机就开始实例化了，有多个进程启动就会实例化多个虚拟机实例。进程退出或关闭，虚拟机实例消亡，再多个虚拟机实例之间不能共享数据。

#### Java程序运行过程

1. Java源文件被被遗弃编译成字节码文件
2. JVM将字节码文件编译成相应操作系统的机器码
3. 机器码调用相应操作系统的本地方法库执行相应的方法

Java虚拟机包括一个类加载子系统、运行时数据区、执行引擎和本地接口库。本地接口库通过调用本地方法库与操作系统交互。

##### 图 1-1

![image](../../images/jvm结构.png)

其中：

- 类加载器子系统用于将编译好的.class文件加载到JVM中
- 运行时数据区用于存储在JVM运行过程中产生的数据，包括程序计数器、方法区、本地方法栈、虚拟机栈和虚拟机堆等
- 执行引擎包括即时编译器和垃圾回收器，即时编译器用于将Java字节码编译成具体的机器码，垃圾回收器用于回收在运行过程中不再使用的对象
- 本地接口库用于调用操作系统的本地方法库完成具体的指令操作